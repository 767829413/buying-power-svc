// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package kafka

import (
	"context"

	"github.com/golang/protobuf/proto"
	"github.com/pkg/errors"
	"github.com/segmentio/kafka-go"
)

// TbcTransactionV2Message wraps original kafka-go message and
// parsed protobuf generated TbcTransactionV2.
type TbcTransactionV2Message struct {
	// raw is set directly from kafka event and left private intentionally.
	// it's advisable to implement adapter methods for both producer and consumer
	// to have key serialization semantics available in one place.
	// helpers might look something like:
	//
	// func (m TbcTransactionV2Message) Key() uint64 {
	//     key, err := proto.DecodeVarint(m.rawkey)
	//     if err != nil {
	//         panic(errors.Wrap(err, "failed to decode event key"))
	//     }
	//     return key
	// }
	//
	// func (m TbcTransactionV2) Message(key uint64) TbcTransactionV2Message {
	// return TbcTransactionV2Message{
	//        Key: proto.EncodeVarint(key),
	//        Value: &m,
	//     }
	// }
	//
	// it also prevents kafka-go (implementation detail) to leak outside of package
	Message
	Value *TbcTransactionV2
}

//TbcTransactionV2Message - unmarshal msg value into TbcTransactionV2Message.
func (m Message) TbcTransactionV2Message() (TbcTransactionV2Message, error) {
	var event TbcTransactionV2
	err := proto.Unmarshal(m.msg.Value, &event)
	if err != nil {
		return TbcTransactionV2Message{}, errors.Wrap(err, "failed to unmarshal msg value into TbcTransactionV2")
	}

	return TbcTransactionV2Message{
		Message: m,
		Value:   &event,
	}, nil
}

//MustTbcTransactionV2Message - unmarshal msg value into TbcTransactionV2Message. Panics if unmarshal fails
func (m Message) MustTbcTransactionV2Message() TbcTransactionV2Message {
	result, err := m.TbcTransactionV2Message()
	if err != nil {
		panic(err)
	}

	return result
}

// DEPRECATED
type TbcTransactionV2Topic struct {
	cfg Config
}

func (t TbcTransactionV2Topic) Reader() TbcTransactionV2Reader {
	return NewTbcTransactionV2Reader(t.cfg.reader(Topic_tbc_transactions_v2.String()))
}

func (t TbcTransactionV2Topic) Writer() TbcTransactionV2Writer {
	return NewTbcTransactionV2Writer(t.cfg.writer(Topic_tbc_transactions_v2.String()))
}

// DEPRECATED
func NewTbcTransactionV2Topic(cfg Config) TbcTransactionV2Topic {
	return TbcTransactionV2Topic{
		cfg,
	}
}

// TbcTransactionV2Reader reads LotUpdatedEvent from kafka.
// DEPERCATED: use ingester
type TbcTransactionV2Reader ProtoReader

// NewTbcTransactionV2Reader inits an instance of TbcTransactionV2Reader.
// DEPRECATED
func NewTbcTransactionV2Reader(cfg ReaderConfig) TbcTransactionV2Reader {
	return TbcTransactionV2Reader(NewProtoReader(cfg))
}

// WithAutoReset returns copy of TbcTransactionV2Reader that in case of ReadMessage error will reset its offset to last commited.
// DEPRECATED: NOT THREAD SAFE & LEAKS RESOURCES
func (r TbcTransactionV2Reader) WithAutoReset() TbcTransactionV2Reader {
	r.autoReset = true
	return r
}

func (r TbcTransactionV2Reader) readMessage(ctx context.Context, reader protoReaderFunc) (TbcTransactionV2Message, error) {
	e := new(TbcTransactionV2)
	msg, err := reader(ctx, e)
	if err != nil {
		if r.autoReset {
			r.Reset()
		}
		return TbcTransactionV2Message{}, err
	}
	return TbcTransactionV2Message{Message: Message{msg: msg.raw}, Value: e}, nil
}

// DEPRECATED: use FetchMessage/CommitMessage instead
func (r TbcTransactionV2Reader) ReadMessage(ctx context.Context) (TbcTransactionV2Message, error) {
	return r.readMessage(ctx, ProtoReader(r).ReadMessage)
}

// DEPRECATED
func (r TbcTransactionV2Reader) FetchMessage(ctx context.Context) (TbcTransactionV2Message, error) {
	return r.readMessage(ctx, ProtoReader(r).FetchMessage)
}

// DEPRECATED
func (r TbcTransactionV2Reader) CommitMessages(ctx context.Context, msgs ...TbcTransactionV2Message) error {
	protoMsgs := make([]ProtoMessage, 0, len(msgs))
	for _, msg := range msgs {
		protoMsgs = append(protoMsgs, ProtoMessage{raw: msg.msg, Value: msg.Value})
	}
	return ProtoReader(r).CommitMessages(ctx, protoMsgs...)
}

// Reset defaults underlying kafka.Reader
// DEPRECATED: leaks resources
func (r TbcTransactionV2Reader) Reset() {
	*r.Reader = *kafka.NewReader(r.Reader.Config())
}

// TbcTransactionV2Writer writes TbcTransactionV2 to kafka.
type TbcTransactionV2Writer ProtoWriter

// NewTbcTransactionV2Writer inits an instance of TbcTransactionV2Writer.
func NewTbcTransactionV2Writer(cfg WriterConfig) TbcTransactionV2Writer {
	return TbcTransactionV2Writer(NewProtoWriter(cfg))
}

// WriteMessages to kafka.
func (w TbcTransactionV2Writer) WriteMessages(ctx context.Context, msgs ...TbcTransactionV2Message) error {
	protoMsgs := make([]ProtoMessage, len(msgs))
	for idx, msg := range msgs {
		protoMsgs[idx] = ProtoMessage{raw: msg.msg, Value: msg.Value}
	}
	return ProtoWriter(w).WriteMessages(ctx, protoMsgs...)
}

// DEPRECATED
func (cfg Config) TbcTransactionV2Topic() TbcTransactionV2Topic {
	return NewTbcTransactionV2Topic(cfg)
}
