// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package kafka

import (
	"context"

	"github.com/golang/protobuf/proto"
	"github.com/pkg/errors"
	"github.com/segmentio/kafka-go"
)

// IdentityEventMessage wraps original kafka-go message and
// parsed protobuf generated IdentityEvent.
type IdentityEventMessage struct {
	// raw is set directly from kafka event and left private intentionally.
	// it's advisable to implement adapter methods for both producer and consumer
	// to have key serialization semantics available in one place.
	// helpers might look something like:
	//
	// func (m IdentityEventMessage) Key() uint64 {
	//     key, err := proto.DecodeVarint(m.rawkey)
	//     if err != nil {
	//         panic(errors.Wrap(err, "failed to decode event key"))
	//     }
	//     return key
	// }
	//
	// func (m IdentityEvent) Message(key uint64) IdentityEventMessage {
	// return IdentityEventMessage{
	//        Key: proto.EncodeVarint(key),
	//        Value: &m,
	//     }
	// }
	//
	// it also prevents kafka-go (implementation detail) to leak outside of package
	Message
	Value *IdentityEvent
}

//IdentityEventMessage - unmarshal msg value into IdentityEventMessage.
func (m Message) IdentityEventMessage() (IdentityEventMessage, error) {
	var event IdentityEvent
	err := proto.Unmarshal(m.msg.Value, &event)
	if err != nil {
		return IdentityEventMessage{}, errors.Wrap(err, "failed to unmarshal msg value into IdentityEvent")
	}

	return IdentityEventMessage{
		Message: m,
		Value:   &event,
	}, nil
}

//MustIdentityEventMessage - unmarshal msg value into IdentityEventMessage. Panics if unmarshal fails
func (m Message) MustIdentityEventMessage() IdentityEventMessage {
	result, err := m.IdentityEventMessage()
	if err != nil {
		panic(err)
	}

	return result
}

// DEPRECATED
type IdentityEventTopic struct {
	cfg Config
}

func (t IdentityEventTopic) Reader() IdentityEventReader {
	return NewIdentityEventReader(t.cfg.reader(Topic_identities.String()))
}

func (t IdentityEventTopic) Writer() IdentityEventWriter {
	return NewIdentityEventWriter(t.cfg.writer(Topic_identities.String()))
}

// DEPRECATED
func NewIdentityEventTopic(cfg Config) IdentityEventTopic {
	return IdentityEventTopic{
		cfg,
	}
}

// IdentityEventReader reads LotUpdatedEvent from kafka.
// DEPERCATED: use ingester
type IdentityEventReader ProtoReader

// NewIdentityEventReader inits an instance of IdentityEventReader.
// DEPRECATED
func NewIdentityEventReader(cfg ReaderConfig) IdentityEventReader {
	return IdentityEventReader(NewProtoReader(cfg))
}

// WithAutoReset returns copy of IdentityEventReader that in case of ReadMessage error will reset its offset to last commited.
// DEPRECATED: NOT THREAD SAFE & LEAKS RESOURCES
func (r IdentityEventReader) WithAutoReset() IdentityEventReader {
	r.autoReset = true
	return r
}

func (r IdentityEventReader) readMessage(ctx context.Context, reader protoReaderFunc) (IdentityEventMessage, error) {
	e := new(IdentityEvent)
	msg, err := reader(ctx, e)
	if err != nil {
		if r.autoReset {
			r.Reset()
		}
		return IdentityEventMessage{}, err
	}
	return IdentityEventMessage{Message: Message{msg: msg.raw}, Value: e}, nil
}

// DEPRECATED: use FetchMessage/CommitMessage instead
func (r IdentityEventReader) ReadMessage(ctx context.Context) (IdentityEventMessage, error) {
	return r.readMessage(ctx, ProtoReader(r).ReadMessage)
}

// DEPRECATED
func (r IdentityEventReader) FetchMessage(ctx context.Context) (IdentityEventMessage, error) {
	return r.readMessage(ctx, ProtoReader(r).FetchMessage)
}

// DEPRECATED
func (r IdentityEventReader) CommitMessages(ctx context.Context, msgs ...IdentityEventMessage) error {
	protoMsgs := make([]ProtoMessage, 0, len(msgs))
	for _, msg := range msgs {
		protoMsgs = append(protoMsgs, ProtoMessage{raw: msg.msg, Value: msg.Value})
	}
	return ProtoReader(r).CommitMessages(ctx, protoMsgs...)
}

// Reset defaults underlying kafka.Reader
// DEPRECATED: leaks resources
func (r IdentityEventReader) Reset() {
	*r.Reader = *kafka.NewReader(r.Reader.Config())
}

// IdentityEventWriter writes IdentityEvent to kafka.
type IdentityEventWriter ProtoWriter

// NewIdentityEventWriter inits an instance of IdentityEventWriter.
func NewIdentityEventWriter(cfg WriterConfig) IdentityEventWriter {
	return IdentityEventWriter(NewProtoWriter(cfg))
}

// WriteMessages to kafka.
func (w IdentityEventWriter) WriteMessages(ctx context.Context, msgs ...IdentityEventMessage) error {
	protoMsgs := make([]ProtoMessage, len(msgs))
	for idx, msg := range msgs {
		protoMsgs[idx] = ProtoMessage{raw: msg.msg, Value: msg.Value}
	}
	return ProtoWriter(w).WriteMessages(ctx, protoMsgs...)
}

// DEPRECATED
func (cfg Config) IdentityEventTopic() IdentityEventTopic {
	return NewIdentityEventTopic(cfg)
}
