// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package payments

import (
	mock "github.com/stretchr/testify/mock"
	amount "gitlab.com/eAuction/go/amount"

	resources "gitlab.com/eAuction/payment-service/pkg/payments/resources"
)

// MockPaymentService is an autogenerated mock type for the PaymentService type
type MockPaymentService struct {
	mock.Mock
}

// ConfirmTransaction provides a mock function with given fields: id, _a1
func (_m *MockPaymentService) ConfirmTransaction(id string, _a1 *amount.Fiat) (resources.TransactionResponse, error) {
	ret := _m.Called(id, _a1)

	var r0 resources.TransactionResponse
	if rf, ok := ret.Get(0).(func(string, *amount.Fiat) resources.TransactionResponse); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(resources.TransactionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *amount.Fiat) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmTransactionByInvoiceID provides a mock function with given fields: purpose, invoiceID, _a2
func (_m *MockPaymentService) ConfirmTransactionByInvoiceID(purpose string, invoiceID string, _a2 *amount.Fiat) error {
	ret := _m.Called(purpose, invoiceID, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *amount.Fiat) error); ok {
		r0 = rf(purpose, invoiceID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransaction provides a mock function with given fields: id
func (_m *MockPaymentService) GetTransaction(id string) (resources.TransactionResponse, error) {
	ret := _m.Called(id)

	var r0 resources.TransactionResponse
	if rf, ok := ret.Get(0).(func(string) resources.TransactionResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(resources.TransactionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: params
func (_m *MockPaymentService) GetTransactions(params GetTransactionsParams) (resources.TransactionListResponse, error) {
	ret := _m.Called(params)

	var r0 resources.TransactionListResponse
	if rf, ok := ret.Get(0).(func(GetTransactionsParams) resources.TransactionListResponse); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(resources.TransactionListResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(GetTransactionsParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundTransaction provides a mock function with given fields: id
func (_m *MockPaymentService) RefundTransaction(id string) (resources.TransactionResponse, error) {
	ret := _m.Called(id)

	var r0 resources.TransactionResponse
	if rf, ok := ret.Get(0).(func(string) resources.TransactionResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(resources.TransactionResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefundTransactionByInvoiceID provides a mock function with given fields: purpose, invoiceID
func (_m *MockPaymentService) RefundTransactionByInvoiceID(purpose string, invoiceID string) error {
	ret := _m.Called(purpose, invoiceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(purpose, invoiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
