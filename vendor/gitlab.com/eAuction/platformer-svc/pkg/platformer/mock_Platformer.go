// Code generated by mockery v1.0.0. DO NOT EDIT.

package platformer

import mock "github.com/stretchr/testify/mock"
import resources "gitlab.com/eAuction/platformer-svc/resources"

// MockPlatformer is an autogenerated mock type for the Platformer type
type MockPlatformer struct {
	mock.Mock
}

// GetPlatform provides a mock function with given fields: id
func (_m *MockPlatformer) GetPlatform(id string) (*resources.PlatformResponse, error) {
	ret := _m.Called(id)

	var r0 *resources.PlatformResponse
	if rf, ok := ret.Get(0).(func(string) *resources.PlatformResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.PlatformResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformByCode provides a mock function with given fields: code
func (_m *MockPlatformer) GetPlatformByCode(code string) (*resources.PlatformResponse, error) {
	ret := _m.Called(code)

	var r0 *resources.PlatformResponse
	if rf, ok := ret.Get(0).(func(string) *resources.PlatformResponse); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.PlatformResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformIDs provides a mock function with given fields:
func (_m *MockPlatformer) GetPlatformIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatformList provides a mock function with given fields:
func (_m *MockPlatformer) GetPlatformList() (*resources.PlatformListResponse, error) {
	ret := _m.Called()

	var r0 *resources.PlatformListResponse
	if rf, ok := ret.Get(0).(func() *resources.PlatformListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.PlatformListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MustPlatform provides a mock function with given fields: id
func (_m *MockPlatformer) MustPlatform(id string) *resources.PlatformResponse {
	ret := _m.Called(id)

	var r0 *resources.PlatformResponse
	if rf, ok := ret.Get(0).(func(string) *resources.PlatformResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.PlatformResponse)
		}
	}

	return r0
}

// MustPlatformIDs provides a mock function with given fields:
func (_m *MockPlatformer) MustPlatformIDs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MustPlatformList provides a mock function with given fields:
func (_m *MockPlatformer) MustPlatformList() *resources.PlatformListResponse {
	ret := _m.Called()

	var r0 *resources.PlatformListResponse
	if rf, ok := ret.Get(0).(func() *resources.PlatformListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.PlatformListResponse)
		}
	}

	return r0
}
