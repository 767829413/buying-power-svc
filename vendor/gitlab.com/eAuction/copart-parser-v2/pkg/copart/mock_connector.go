// Code generated by mockery v1.0.0. DO NOT EDIT.

package copart

import io "io"
import mock "github.com/stretchr/testify/mock"

// MockConnector is an autogenerated mock type for the Connector type
type MockConnector struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockConnector) Close() {
	_m.Called()
}

// Done provides a mock function with given fields:
func (_m *MockConnector) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// DowloadInvoice provides a mock function with given fields: invoiceNumber, paymentType, currencyCode, invoiceType, lotNumber, secretID, bidderNumber
func (_m *MockConnector) DowloadInvoice(invoiceNumber string, paymentType string, currencyCode string, invoiceType string, lotNumber string, secretID string, bidderNumber string) (io.ReadCloser, error) {
	ret := _m.Called(invoiceNumber, paymentType, currencyCode, invoiceType, lotNumber, secretID, bidderNumber)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string) io.ReadCloser); ok {
		r0 = rf(invoiceNumber, paymentType, currencyCode, invoiceType, lotNumber, secretID, bidderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string) error); ok {
		r1 = rf(invoiceNumber, paymentType, currencyCode, invoiceType, lotNumber, secretID, bidderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuyerNumber provides a mock function with given fields:
func (_m *MockConnector) GetBuyerNumber() BuyerNumber {
	ret := _m.Called()

	var r0 BuyerNumber
	if rf, ok := ret.Get(0).(func() BuyerNumber); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(BuyerNumber)
	}

	return r0
}

// GetDynamicLotDetails provides a mock function with given fields: lotID
func (_m *MockConnector) GetDynamicLotDetails(lotID string) (*DynamicLotDetails, error) {
	ret := _m.Called(lotID)

	var r0 *DynamicLotDetails
	if rf, ok := ret.Get(0).(func(string) *DynamicLotDetails); ok {
		r0 = rf(lotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DynamicLotDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lotID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesList provides a mock function with given fields: lotID
func (_m *MockConnector) GetImagesList(lotID string) (*ImageList, error) {
	ret := _m.Called(lotID)

	var r0 *ImageList
	if rf, ok := ret.Get(0).(func(string) *ImageList); ok {
		r0 = rf(lotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ImageList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lotID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoices provides a mock function with given fields: page, pageSize
func (_m *MockConnector) GetInvoices(page int64, pageSize int64) (*InvoicesResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 *InvoicesResponse
	if rf, ok := ret.Get(0).(func(int64, int64) *InvoicesResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InvoicesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLost provides a mock function with given fields: page, pageSize
func (_m *MockConnector) GetLost(page int64, pageSize int64) (*LostResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 *LostResponse
	if rf, ok := ret.Get(0).(func(int64, int64) *LostResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LostResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLotDetails provides a mock function with given fields: lotID
func (_m *MockConnector) GetLotDetails(lotID string) (*LotDetails, error) {
	ret := _m.Called(lotID)

	var r0 *LotDetails
	if rf, ok := ret.Get(0).(func(string) *LotDetails); ok {
		r0 = rf(lotID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LotDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(lotID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLots provides a mock function with given fields:
func (_m *MockConnector) GetLots() ([]Lot, error) {
	ret := _m.Called()

	var r0 []Lot
	if rf, ok := ret.Get(0).(func() []Lot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Lot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenItems provides a mock function with given fields: page, pageSize
func (_m *MockConnector) GetOpenItems(page int64, pageSize int64) (*OpenItemsResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 *OpenItemsResponse
	if rf, ok := ret.Get(0).(func(int64, int64) *OpenItemsResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OpenItemsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSale provides a mock function with given fields: saleID
func (_m *MockConnector) GetSale(saleID string) (*SaleData, error) {
	ret := _m.Called(saleID)

	var r0 *SaleData
	if rf, ok := ret.Get(0).(func(string) *SaleData); ok {
		r0 = rf(saleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SaleData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(saleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSales provides a mock function with given fields:
func (_m *MockConnector) GetSales() ([]SaleData, error) {
	ret := _m.Called()

	var r0 []SaleData
	if rf, ok := ret.Get(0).(func() []SaleData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SaleData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingSales provides a mock function with given fields:
func (_m *MockConnector) GetUpcomingSales() ([]Sale, error) {
	ret := _m.Called()

	var r0 []Sale
	if rf, ok := ret.Get(0).(func() []Sale); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWatchlist provides a mock function with given fields:
func (_m *MockConnector) GetWatchlist() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWon provides a mock function with given fields: page, pageSize
func (_m *MockConnector) GetWon(page int64, pageSize int64) (*WonResponse, error) {
	ret := _m.Called(page, pageSize)

	var r0 *WonResponse
	if rf, ok := ret.Get(0).(func(int64, int64) *WonResponse); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*WonResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAnonymous provides a mock function with given fields:
func (_m *MockConnector) IsAnonymous() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PostMaxBid provides a mock function with given fields: request
func (_m *MockConnector) PostMaxBid(request MaxBidRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(MaxBidRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFromWatchlist provides a mock function with given fields: lots
func (_m *MockConnector) RemoveFromWatchlist(lots []string) error {
	ret := _m.Called(lots)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(lots)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
