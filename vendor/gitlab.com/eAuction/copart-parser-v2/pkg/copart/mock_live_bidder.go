// Code generated by mockery v1.0.0. DO NOT EDIT.

package copart

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockLiveBidder is an autogenerated mock type for the LiveBidder type
type MockLiveBidder struct {
	mock.Mock
}

// BuyerNumber provides a mock function with given fields:
func (_m *MockLiveBidder) BuyerNumber() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockLiveBidder) Close() {
	_m.Called()
}

// Done provides a mock function with given fields:
func (_m *MockLiveBidder) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Send provides a mock function with given fields: ctx, request
func (_m *MockLiveBidder) Send(ctx context.Context, request ParserCommand) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ParserCommand) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, id
func (_m *MockLiveBidder) Subscribe(ctx context.Context, id string) <-chan ParserEvent {
	ret := _m.Called(ctx, id)

	var r0 <-chan ParserEvent
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan ParserEvent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan ParserEvent)
		}
	}

	return r0
}
