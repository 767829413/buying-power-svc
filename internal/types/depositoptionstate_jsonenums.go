// generated by jsonenums -tprefix=false -transform=snake -type=DepositOptionState; DO NOT EDIT
package types

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stubs for imports
	_ = json.Delim('s')
	_ = driver.Int32

}

var ErrDepositOptionStateInvalid = errors.New("DepositOptionState is invalid")

func init() {
	var v DepositOptionState
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DepositOptionStateNameToValue = map[string]DepositOptionState{
			interface{}(DepositOptionStateTaken).(fmt.Stringer).String():        DepositOptionStateTaken,
			interface{}(DepositOptionStateNotAvailable).(fmt.Stringer).String(): DepositOptionStateNotAvailable,
			interface{}(DepositOptionStateAvailable).(fmt.Stringer).String():    DepositOptionStateAvailable,
		}
	}
}

var _DepositOptionStateNameToValue = map[string]DepositOptionState{
	"taken":         DepositOptionStateTaken,
	"not_available": DepositOptionStateNotAvailable,
	"available":     DepositOptionStateAvailable,
}

var _DepositOptionStateValueToName = map[DepositOptionState]string{
	DepositOptionStateTaken:        "taken",
	DepositOptionStateNotAvailable: "not_available",
	DepositOptionStateAvailable:    "available",
}

// String is generated so DepositOptionState satisfies fmt.Stringer.
func (r DepositOptionState) String() string {
	s, ok := _DepositOptionStateValueToName[r]
	if !ok {
		return fmt.Sprintf("DepositOptionState(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for DepositOptionState.
func (r DepositOptionState) Validate() error {
	_, ok := _DepositOptionStateValueToName[r]
	if !ok {
		return ErrDepositOptionStateInvalid
	}
	return nil
}

// MarshalJSON is generated so DepositOptionState satisfies json.Marshaler.
func (r DepositOptionState) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DepositOptionStateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid DepositOptionState: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so DepositOptionState satisfies json.Unmarshaler.
func (r *DepositOptionState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DepositOptionState should be a string, got %s", data)
	}
	v, ok := _DepositOptionStateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid DepositOptionState %q", s)
	}
	*r = v
	return nil
}

func (t *DepositOptionState) Scan(src interface{}) error {
	i, ok := src.(int64)
	if !ok {
		return fmt.Errorf("can't scan from %T", src)
	}
	*t = DepositOptionState(i)
	return nil
}

func (t DepositOptionState) Value() (driver.Value, error) {
	return int64(t), nil
}
